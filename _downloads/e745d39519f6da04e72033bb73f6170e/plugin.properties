# The directory to watch for new data sets
incoming-dir = ${root-dir}/incoming-omero

# The handler class.
top-level-data-set-handler = ch.systemsx.cisd.etlserver.registrator.api.v2.JythonTopLevelDataSetHandlerV2


# The script to execute, reloaded and recompiled each time a file/folder is placed in the dropbox
script-path = omero-receiver.py

# The appropriate storage processor
#storage-processor = ch.systemsx.cisd.openbis.dss.etl.MicroscopyStorageProcessor
storage-processor = ch.systemsx.cisd.etlserver.DefaultStorageProcessor

# Defines how the drop box decides if a folder is ready to process: either by a 'marker-file' or a time out which >
# The time out is set globally in the service.properties and is called 'quiet-period'. This means when the number >
# been made to the incoming folder the drop will start to register. The marker file must have the following naming>
incoming-data-completeness-condition = auto-detection

# Enable development mode
development-mode = true

#
# On Error Decision
#
# The class that implements the decision
on-error-decision.class = ch.systemsx.cisd.etlserver.registrator.ConfiguredOnErrorActionDecision
    
# What to do if the data set fails validation
on-error-decision.invalid-data-set = MOVE_TO_ERROR
    
# What to do if the validation script has problems
on-error-decision.validation-script-error = MOVE_TO_ERROR
    
# What to do if the openBIS does not accept the entities
on-error-decision.registration-error = MOVE_TO_ERROR
    
# What to do if the registration script has problems
on-error-decision.registration-script-error = DELETE #MOVE_TO_ERROR
    
# What to do if the storage processor does not run correctly
on-error-decision.storage-processor-error = MOVE_TO_ERROR
    
# What to do if an error occurs after the entities have been registered in openBIS
on-error-decision.post-registration-error = MOVE_TO_ERROR
